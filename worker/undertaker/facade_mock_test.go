// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/undertaker (interfaces: Facade)

// Package undertaker_test is a generated GoMock package.
package undertaker_test

import (
	reflect "reflect"

	status "github.com/juju/juju/core/status"
	watcher "github.com/juju/juju/core/watcher"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	config "github.com/juju/juju/environs/config"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockFacade is a mock of Facade interface.
type MockFacade struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeMockRecorder
}

// MockFacadeMockRecorder is the mock recorder for MockFacade.
type MockFacadeMockRecorder struct {
	mock *MockFacade
}

// NewMockFacade creates a new mock instance.
func NewMockFacade(ctrl *gomock.Controller) *MockFacade {
	mock := &MockFacade{ctrl: ctrl}
	mock.recorder = &MockFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacade) EXPECT() *MockFacadeMockRecorder {
	return m.recorder
}

// CloudSpec mocks base method.
func (m *MockFacade) CloudSpec() (cloudspec.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSpec")
	ret0, _ := ret[0].(cloudspec.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSpec indicates an expected call of CloudSpec.
func (mr *MockFacadeMockRecorder) CloudSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSpec", reflect.TypeOf((*MockFacade)(nil).CloudSpec))
}

// ModelConfig mocks base method.
func (m *MockFacade) ModelConfig() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockFacadeMockRecorder) ModelConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockFacade)(nil).ModelConfig))
}

// ModelInfo mocks base method.
func (m *MockFacade) ModelInfo() (params.UndertakerModelInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo")
	ret0, _ := ret[0].(params.UndertakerModelInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockFacadeMockRecorder) ModelInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockFacade)(nil).ModelInfo))
}

// ProcessDyingModel mocks base method.
func (m *MockFacade) ProcessDyingModel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDyingModel")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDyingModel indicates an expected call of ProcessDyingModel.
func (mr *MockFacadeMockRecorder) ProcessDyingModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDyingModel", reflect.TypeOf((*MockFacade)(nil).ProcessDyingModel))
}

// RemoveModel mocks base method.
func (m *MockFacade) RemoveModel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveModel")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveModel indicates an expected call of RemoveModel.
func (mr *MockFacadeMockRecorder) RemoveModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveModel", reflect.TypeOf((*MockFacade)(nil).RemoveModel))
}

// SetStatus mocks base method.
func (m *MockFacade) SetStatus(arg0 status.Status, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockFacadeMockRecorder) SetStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockFacade)(nil).SetStatus), arg0, arg1, arg2)
}

// WatchModel mocks base method.
func (m *MockFacade) WatchModel() (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModel")
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModel indicates an expected call of WatchModel.
func (mr *MockFacadeMockRecorder) WatchModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModel", reflect.TypeOf((*MockFacade)(nil).WatchModel))
}

// WatchModelResources mocks base method.
func (m *MockFacade) WatchModelResources() (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelResources")
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelResources indicates an expected call of WatchModelResources.
func (mr *MockFacadeMockRecorder) WatchModelResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelResources", reflect.TypeOf((*MockFacade)(nil).WatchModelResources))
}

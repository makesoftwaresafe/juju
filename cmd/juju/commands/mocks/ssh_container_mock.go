// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/commands (interfaces: CloudCredentialAPI,ApplicationAPI,ModelAPI,CharmsAPI,ModelCommand,SSHControllerAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/juju/juju/api"
	application "github.com/juju/juju/api/client/application"
	client "github.com/juju/juju/api/client/client"
	charms "github.com/juju/juju/api/common/charms"
	cloud "github.com/juju/juju/cloud"
	controller "github.com/juju/juju/controller"
	jujuclient "github.com/juju/juju/jujuclient"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudCredentialAPI is a mock of CloudCredentialAPI interface.
type MockCloudCredentialAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudCredentialAPIMockRecorder
}

// MockCloudCredentialAPIMockRecorder is the mock recorder for MockCloudCredentialAPI.
type MockCloudCredentialAPIMockRecorder struct {
	mock *MockCloudCredentialAPI
}

// NewMockCloudCredentialAPI creates a new mock instance.
func NewMockCloudCredentialAPI(ctrl *gomock.Controller) *MockCloudCredentialAPI {
	mock := &MockCloudCredentialAPI{ctrl: ctrl}
	mock.recorder = &MockCloudCredentialAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudCredentialAPI) EXPECT() *MockCloudCredentialAPIMockRecorder {
	return m.recorder
}

// BestAPIVersion mocks base method.
func (m *MockCloudCredentialAPI) BestAPIVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestAPIVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// BestAPIVersion indicates an expected call of BestAPIVersion.
func (mr *MockCloudCredentialAPIMockRecorder) BestAPIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestAPIVersion", reflect.TypeOf((*MockCloudCredentialAPI)(nil).BestAPIVersion))
}

// Close mocks base method.
func (m *MockCloudCredentialAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloudCredentialAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloudCredentialAPI)(nil).Close))
}

// Cloud mocks base method.
func (m *MockCloudCredentialAPI) Cloud(arg0 names.CloudTag) (cloud.Cloud, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud", arg0)
	ret0, _ := ret[0].(cloud.Cloud)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cloud indicates an expected call of Cloud.
func (mr *MockCloudCredentialAPIMockRecorder) Cloud(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockCloudCredentialAPI)(nil).Cloud), arg0)
}

// CredentialContents mocks base method.
func (m *MockCloudCredentialAPI) CredentialContents(arg0, arg1 string, arg2 bool) ([]params.CredentialContentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialContents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]params.CredentialContentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CredentialContents indicates an expected call of CredentialContents.
func (mr *MockCloudCredentialAPIMockRecorder) CredentialContents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialContents", reflect.TypeOf((*MockCloudCredentialAPI)(nil).CredentialContents), arg0, arg1, arg2)
}

// MockApplicationAPI is a mock of ApplicationAPI interface.
type MockApplicationAPI struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationAPIMockRecorder
}

// MockApplicationAPIMockRecorder is the mock recorder for MockApplicationAPI.
type MockApplicationAPIMockRecorder struct {
	mock *MockApplicationAPI
}

// NewMockApplicationAPI creates a new mock instance.
func NewMockApplicationAPI(ctrl *gomock.Controller) *MockApplicationAPI {
	mock := &MockApplicationAPI{ctrl: ctrl}
	mock.recorder = &MockApplicationAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationAPI) EXPECT() *MockApplicationAPIMockRecorder {
	return m.recorder
}

// BestAPIVersion mocks base method.
func (m *MockApplicationAPI) BestAPIVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestAPIVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// BestAPIVersion indicates an expected call of BestAPIVersion.
func (mr *MockApplicationAPIMockRecorder) BestAPIVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestAPIVersion", reflect.TypeOf((*MockApplicationAPI)(nil).BestAPIVersion))
}

// Close mocks base method.
func (m *MockApplicationAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockApplicationAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockApplicationAPI)(nil).Close))
}

// Leader mocks base method.
func (m *MockApplicationAPI) Leader(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leader", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leader indicates an expected call of Leader.
func (mr *MockApplicationAPIMockRecorder) Leader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockApplicationAPI)(nil).Leader), arg0)
}

// UnitsInfo mocks base method.
func (m *MockApplicationAPI) UnitsInfo(arg0 []names.UnitTag) ([]application.UnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitsInfo", arg0)
	ret0, _ := ret[0].([]application.UnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitsInfo indicates an expected call of UnitsInfo.
func (mr *MockApplicationAPIMockRecorder) UnitsInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitsInfo", reflect.TypeOf((*MockApplicationAPI)(nil).UnitsInfo), arg0)
}

// MockModelAPI is a mock of ModelAPI interface.
type MockModelAPI struct {
	ctrl     *gomock.Controller
	recorder *MockModelAPIMockRecorder
}

// MockModelAPIMockRecorder is the mock recorder for MockModelAPI.
type MockModelAPIMockRecorder struct {
	mock *MockModelAPI
}

// NewMockModelAPI creates a new mock instance.
func NewMockModelAPI(ctrl *gomock.Controller) *MockModelAPI {
	mock := &MockModelAPI{ctrl: ctrl}
	mock.recorder = &MockModelAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelAPI) EXPECT() *MockModelAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockModelAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModelAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelAPI)(nil).Close))
}

// ModelInfo mocks base method.
func (m *MockModelAPI) ModelInfo(arg0 []names.ModelTag) ([]params.ModelInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfo", arg0)
	ret0, _ := ret[0].([]params.ModelInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInfo indicates an expected call of ModelInfo.
func (mr *MockModelAPIMockRecorder) ModelInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfo", reflect.TypeOf((*MockModelAPI)(nil).ModelInfo), arg0)
}

// MockCharmsAPI is a mock of CharmsAPI interface.
type MockCharmsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCharmsAPIMockRecorder
}

// MockCharmsAPIMockRecorder is the mock recorder for MockCharmsAPI.
type MockCharmsAPIMockRecorder struct {
	mock *MockCharmsAPI
}

// NewMockCharmsAPI creates a new mock instance.
func NewMockCharmsAPI(ctrl *gomock.Controller) *MockCharmsAPI {
	mock := &MockCharmsAPI{ctrl: ctrl}
	mock.recorder = &MockCharmsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmsAPI) EXPECT() *MockCharmsAPIMockRecorder {
	return m.recorder
}

// CharmInfo mocks base method.
func (m *MockCharmsAPI) CharmInfo(arg0 string) (*charms.CharmInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharmInfo", arg0)
	ret0, _ := ret[0].(*charms.CharmInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CharmInfo indicates an expected call of CharmInfo.
func (mr *MockCharmsAPIMockRecorder) CharmInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharmInfo", reflect.TypeOf((*MockCharmsAPI)(nil).CharmInfo), arg0)
}

// Close mocks base method.
func (m *MockCharmsAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCharmsAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCharmsAPI)(nil).Close))
}

// MockModelCommand is a mock of ModelCommand interface.
type MockModelCommand struct {
	ctrl     *gomock.Controller
	recorder *MockModelCommandMockRecorder
}

// MockModelCommandMockRecorder is the mock recorder for MockModelCommand.
type MockModelCommandMockRecorder struct {
	mock *MockModelCommand
}

// NewMockModelCommand creates a new mock instance.
func NewMockModelCommand(ctrl *gomock.Controller) *MockModelCommand {
	mock := &MockModelCommand{ctrl: ctrl}
	mock.recorder = &MockModelCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelCommand) EXPECT() *MockModelCommandMockRecorder {
	return m.recorder
}

// ModelDetails mocks base method.
func (m *MockModelCommand) ModelDetails() (string, *jujuclient.ModelDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelDetails")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*jujuclient.ModelDetails)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ModelDetails indicates an expected call of ModelDetails.
func (mr *MockModelCommandMockRecorder) ModelDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelDetails", reflect.TypeOf((*MockModelCommand)(nil).ModelDetails))
}

// ModelIdentifier mocks base method.
func (m *MockModelCommand) ModelIdentifier() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelIdentifier")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelIdentifier indicates an expected call of ModelIdentifier.
func (mr *MockModelCommandMockRecorder) ModelIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelIdentifier", reflect.TypeOf((*MockModelCommand)(nil).ModelIdentifier))
}

// NewAPIClient mocks base method.
func (m *MockModelCommand) NewAPIClient() (*client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAPIClient")
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAPIClient indicates an expected call of NewAPIClient.
func (mr *MockModelCommandMockRecorder) NewAPIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAPIClient", reflect.TypeOf((*MockModelCommand)(nil).NewAPIClient))
}

// NewAPIRoot mocks base method.
func (m *MockModelCommand) NewAPIRoot() (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAPIRoot")
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAPIRoot indicates an expected call of NewAPIRoot.
func (mr *MockModelCommandMockRecorder) NewAPIRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAPIRoot", reflect.TypeOf((*MockModelCommand)(nil).NewAPIRoot))
}

// NewControllerAPIRoot mocks base method.
func (m *MockModelCommand) NewControllerAPIRoot() (api.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewControllerAPIRoot")
	ret0, _ := ret[0].(api.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewControllerAPIRoot indicates an expected call of NewControllerAPIRoot.
func (mr *MockModelCommandMockRecorder) NewControllerAPIRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewControllerAPIRoot", reflect.TypeOf((*MockModelCommand)(nil).NewControllerAPIRoot))
}

// MockSSHControllerAPI is a mock of SSHControllerAPI interface.
type MockSSHControllerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSSHControllerAPIMockRecorder
}

// MockSSHControllerAPIMockRecorder is the mock recorder for MockSSHControllerAPI.
type MockSSHControllerAPIMockRecorder struct {
	mock *MockSSHControllerAPI
}

// NewMockSSHControllerAPI creates a new mock instance.
func NewMockSSHControllerAPI(ctrl *gomock.Controller) *MockSSHControllerAPI {
	mock := &MockSSHControllerAPI{ctrl: ctrl}
	mock.recorder = &MockSSHControllerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHControllerAPI) EXPECT() *MockSSHControllerAPIMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockSSHControllerAPI) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockSSHControllerAPIMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockSSHControllerAPI)(nil).ControllerConfig))
}
